generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Rol {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  permisos    RolPermiso[]
  Usuario     Usuario[]
}

model Inquilino {
  id              String         @id @default(uuid())
  nombreCompleto  String
  dni             String
  numero          String
  correo          String
  fechaNacimiento DateTime
  createAt        DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  activo          Boolean
  Acompañante     Acompañante[]
  Contratos       Contratos[]
}

model Acompañante {
  id             String    @id @default(uuid())
  nombreCompleto String
  inquilinoId    String
  Parentesco     String
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  activo         Boolean
  inquilino      Inquilino @relation(fields: [inquilinoId], references: [id])
}



model Habitaciones {
  id               String           @id @default(uuid())
  apartamentoId    String
  tipoHabitacionId String
  cantidad         Int              @default(1)
  apartamento      Apartamento      @relation(fields: [apartamentoId], references: [id])
  tipoHabitacion   TiposHabitacion  @relation(fields: [tipoHabitacionId], references: [id])
  createAt         DateTime         @default(now())
  activo           Boolean
  updateAt         DateTime         @updatedAt

  @@index([apartamentoId], map: "Habitaciones_apartamentoId_fkey")
  @@index([tipoHabitacionId], map: "Habitaciones_tipoHabitacionId_fkey")
}

model TiposHabitacion {
  id          String         @id @default(uuid())
  nombre      String         @unique
  createAt    DateTime       @default(now())
  updateAt    DateTime       @updatedAt
  activo      Boolean
  apartamento Habitaciones[]
}

model Apartamento {
  id                   String                @id @default(uuid())
  numero               String                @unique
  direccion            String?
  createAt             DateTime              @default(now())
  updateAt             DateTime              @updatedAt
  disponible           Boolean               @default(true)
  apartamento          Habitaciones[]
  ApartamentoServicios ApartamentoServicios[]
  activo               Boolean
  Contratos            Contratos[]
}

model Servicios {
  id                   String                @id @default(uuid())
  nombre               String                @unique
  createAt             DateTime              @default(now())
  updateAt             DateTime              @updatedAt
  activo               Boolean
  ApartamentoServicios ApartamentoServicios[]
}

model ApartamentoServicios {
  id             String      @id @default(uuid())
  apartamentoId  String
  servicioId     String
  incluido       Boolean     @default(true)
  costoAdicional Decimal     @default(0.00)
  apartamento    Apartamento @relation(fields: [apartamentoId], references: [id])
  servicio       Servicios   @relation(fields: [servicioId], references: [id])
  createAt       DateTime    @default(now())
  updateAt       DateTime    @updatedAt

  @@index([apartamentoId], map: "ApartamentoServicios_apartamentoId_fkey")
  @@index([servicioId], map: "ApartamentoServicios_servicioId_fkey")
}

model Contratos {
  id            String      @id @default(uuid())
  inquilinoId   String
  apartamentoId String
  fechaInicio   DateTime
  fechaFin      DateTime?
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  montoMensual  Decimal     @default(0.00)
  activo        Boolean     @default(true)
  inquilino     Inquilino   @relation(fields: [inquilinoId], references: [id])
  apartamento   Apartamento @relation(fields: [apartamentoId], references: [id])
  recibos       Recibos[]

  @@index([inquilinoId], map: "Contratos_inquilinoId_fkey")
  @@index([apartamentoId], map: "Contratos_apartamentoId_fkey")
}

model Recibos {
  id         String           @id @default(uuid())
  contratoId String
  fechaPago  DateTime
  total      Decimal          @default(0.00)
  createAt   DateTime         @default(now())
  updateAt   DateTime         @updatedAt
  contrato   Contratos        @relation(fields: [contratoId], references: [id])
  detalles   ReciboDetalles[]

  @@index([contratoId], map: "Recibos_contratoId_fkey")
}

model ReciboDetalles {
  id          String   @id @default(uuid())
  reciboId    String
  descripcion String
  monto       Decimal  @default(0.00)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  recibo      Recibos  @relation(fields: [reciboId], references: [id])

  @@index([reciboId], map: "ReciboDetalles_reciboId_fkey")
}

model Permiso {
  id          String       @id @default(uuid())
  nombre      String       @unique
  descripcion String
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  activo      Boolean
  roles       RolPermiso[]
}

model RolPermiso {
  id        String   @id @default(uuid())
  rolId     String
  permisoId String
  createAt  DateTime @default(now())
  permiso   Permiso  @relation(fields: [permisoId], references: [id])
  rol       Rol      @relation(fields: [rolId], references: [id])

  @@unique([rolId, permisoId])
  @@index([permisoId], map: "RolPermiso_permisoId_fkey")
}

model Usuario {
  id          String   @id @default(uuid())
  nombre      String
  email       String   @unique
  password    String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  activo      Boolean
  rolId       String
  DebeCambiar Boolean
  rol         Rol      @relation(fields: [rolId], references: [id])

  @@index([rolId], map: "Usuario_rolId_fkey")
}
